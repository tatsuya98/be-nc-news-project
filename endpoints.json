{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [{ "slug": "football", "description": "Footie!" }]
    }
  },
  "GET /api/articles": {
    "description": "serves an array of all articles",
    "queries": ["author", "topic", "sort_by", "order"],
    "sort_by": [
      "article_id",
      "title",
      "topic",
      "author",
      "body",
      "created_at",
      "votes",
      "article_img_url"
    ],
    "exampleResponse": {
      "articles": [
        {
          "title": "Seafood substitutions are increasing",
          "topic": "cooking",
          "author": "weegembump",
          "body": "Text from the article..",
          "created_at": "2018-05-30T15:59:13.341Z",
          "votes": 0,
          "comment_count": 6
        }
      ]
    }
  },
  "POST /api/articles": {
    "description": "adds a new article to the database and returns the object",
    "body": {
      "author": "must be an existing username in users table",
      "title": "string",
      "body": "string",
      " topic": "must be an existing topic in topics table",
      "article_img_url": "string. default provided if left undefined"
    },
    "exampleResponse": {
      "author": "butter_bridge",
      "title": "yes",
      "body": "hello",
      "topic": "cats",
      "article_img_url": "url",
      "article_id": 14,
      " votes": 0,
      "created_at": "2018-05-30T15:59:13.341Z",
      " comment_count": 0
    }
  },
  "GET /api/articles/:article_id": {
    "description": "serves an article if the article exist for the id accepts id of type int",
    "exampleResponse": {
      "article": {
        "article_id": 1,
        "title": "Seafood substitutions are increasing",
        "topic": "cooking",
        "author": "weegembump",
        "body": "Text from the article..",
        "created_at": "2018-05-30T15:59:13.341Z",
        "votes": 0,
        "comment_count": 0
      }
    }
  },
  "PATCH /api/articles/:article_id": {
    "description": "serves an article after updating it. it accepts an object with a value that increases or decreases vote by a certain amount and an id of type int",
    "exampleResponse": {
      "article": {
        "article_id": 1,
        "title": "Seafood substitutions are increasing",
        "topic": "cooking",
        "author": "weegembump",
        "body": "Text from the article..",
        "created_at": "2018-05-30T15:59:13.341Z",
        "votes": 100,
        "comment_count": 6
      }
    }
  },
  "GET /api/articles/:article_id/comments": {
    "description": "servers an array of comments if there are comments for the article or an empty array if there are no comments for exsisting article accepts id of type int",
    "exampleResponse": {
      "comments": [
        {
          "comment_id": 1,
          "body": "Text from the comment",
          "article_id": 2,
          "author": "user_name",
          "votes": 0,
          "created_at": "2018-05-30T15:59:13.341Z"
        }
      ]
    }
  },
  "POST /api/articles/:article_id/comments": {
    "description": "serves comment the user makes on the article accepts id of type int",
    "exampleResponse": {
      "comment": {
        "comment_id": 5,
        "body": "Text from the comment",
        "article_id": 2,
        "author": "user_name",
        "votes": 0,
        "created_at": "2018-05-30T15:59:13.341Z"
      }
    }
  },
  "DELETE /api/comments/:comment_Id": {
    "description": "removes comment for specified comment_id accepts id of type int"
  },
  "PATCH /api/comments/:comment_Id": {
    "description": "updates the vote column and returns the updated comment",
    "body": {
      "inc_vote": "negative number to decrement, positive to increment"
    },
    "exampleResponse": {
      "comment_id": 1,
      "body": "Lobster pot",
      " votes": 100,
      "author": "icellusedkars",
      " article_id": 1,
      "created_at": 1589577540000
    }
  },

  "GET /api/users": {
    "description": "serves an array of all users",
    "exampleResponse": [
      {
        "username": "butter_bridge",
        "name": "bob",
        "avatar_img_url": "url"
      }
    ]
  },
  "GET /api/users/:username": {
    "description": "returns the user info for provided username",
    "exampleResponse": {
      "username": "butter_bridge",
      "name": "bob",
      "avatar_img_url": "url"
    }
  }
}
